!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/krushna/dsa/shrida mam notes/CLL-20240910/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
data	list.h	/^    int data;$/;"	m	struct:node	typeref:typename:int
freelist	list.c	/^void freelist(list *l){$/;"	f	typeref:typename:void
front	list.h	/^        node  *front, *rear;$/;"	m	struct:list	typeref:typename:node *
init	list.c	/^void init(list *l){$/;"	f	typeref:typename:void
insertright	list.c	/^void insertright(list *l, int d) {$/;"	f	typeref:typename:void
insertsorted	list.c	/^void insertsorted(list *l,int d){$/;"	f	typeref:typename:void
isempty	list.c	/^int isempty(list l){$/;"	f	typeref:typename:int
length	list.c	/^int length(list l){$/;"	f	typeref:typename:int
list	list.h	/^typedef struct list{$/;"	s
list	list.h	/^}list;$/;"	t	typeref:struct:list
listunion	list.c	/^list listunion(const list l1, list l2){ $/;"	f	typeref:typename:list
main	listtest.c	/^void main(){$/;"	f	typeref:typename:void
next	list.h	/^    struct node *next, *prev;$/;"	m	struct:node	typeref:struct:node *
node	list.h	/^typedef struct node {$/;"	s
node	list.h	/^}node;$/;"	t	typeref:struct:node
prev	list.h	/^    struct node *next, *prev;$/;"	m	struct:node	typeref:struct:node *
printlistLR	list.c	/^void printlistLR(list l) {    $/;"	f	typeref:typename:void
printlistRL	list.c	/^void printlistRL(list l) {$/;"	f	typeref:typename:void
rear	list.h	/^        node  *front, *rear;$/;"	m	struct:list	typeref:typename:node *
removelist	list.c	/^void removelist(list *l, int d){$/;"	f	typeref:typename:void
reverse	list.c	/^void reverse(list *l){$/;"	f	typeref:typename:void
search	list.c	/^int search(list l, int d){$/;"	f	typeref:typename:int
sort	list.c	/^void sort(list *l){$/;"	f	typeref:typename:void
