!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/krushna/dsa/dsa/doubly-linkedlist/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
DDL	dlinkedlist.h	/^typedef struct DDL{$/;"	s
DDL	dlinkedlist.h	/^}DDL;$/;"	t	typeref:struct:DDL
d	dlinkedlist.h	/^    int d;$/;"	m	struct:node	typeref:typename:int
display	dlinkedlist.c	/^void display(DDL l) {$/;"	f	typeref:typename:void
find_length	dlinkedlist.c	/^int find_length(DDL l) {$/;"	f	typeref:typename:int
front	dlinkedlist.h	/^    struct node *front, *rear;$/;"	m	struct:DDL	typeref:struct:node *
init	dlinkedlist.c	/^void init(DDL *l) {$/;"	f	typeref:typename:void
insert_using_front	dlinkedlist.c	/^void insert_using_front(DDL *l, int data) {$/;"	f	typeref:typename:void
insert_using_rear	dlinkedlist.c	/^void insert_using_rear(DDL *l, int data) {$/;"	f	typeref:typename:void
isEmpty	dlinkedlist.c	/^int isEmpty(DDL l) {$/;"	f	typeref:typename:int
main	main.c	/^int main() {$/;"	f	typeref:typename:int
next	dlinkedlist.h	/^    struct node *next, *previous;$/;"	m	struct:node	typeref:struct:node *
node	dlinkedlist.h	/^typedef struct node{$/;"	s
node	dlinkedlist.h	/^}node;$/;"	t	typeref:struct:node
previous	dlinkedlist.h	/^    struct node *next, *previous;$/;"	m	struct:node	typeref:struct:node *
rear	dlinkedlist.h	/^    struct node *front, *rear;$/;"	m	struct:DDL	typeref:struct:node *
reverse_display	dlinkedlist.c	/^void reverse_display(DDL l) {$/;"	f	typeref:typename:void
