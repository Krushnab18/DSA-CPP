!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/krushna/dsa/dsa/stack/int_stack/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
data	stack.h	/^    int data;$/;"	m	struct:node	typeref:typename:int
init_stack	stack.c	/^void init_stack(stack *s) {$/;"	f	typeref:typename:void
is_empty	stack.c	/^int is_empty(stack s) {$/;"	f	typeref:typename:int
main	main.c	/^int main() {$/;"	f	typeref:typename:int
next	stack.h	/^    struct  node *next;$/;"	m	struct:node	typeref:struct:node *
node	stack.h	/^typedef struct node {$/;"	s
node	stack.h	/^}node;$/;"	t	typeref:struct:node
peek	stack.c	/^int peek(stack *s, int pos) {$/;"	f	typeref:typename:int
pop	stack.c	/^int pop(stack *s) {$/;"	f	typeref:typename:int
push	stack.c	/^void push(stack *s, int data) {$/;"	f	typeref:typename:void
stack	stack.h	/^typedef struct stack {$/;"	s
stack	stack.h	/^}stack;$/;"	t	typeref:struct:stack
top	stack.h	/^    node *top;$/;"	m	struct:stack	typeref:typename:node *
